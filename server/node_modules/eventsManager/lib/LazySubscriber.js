var Subscriber = require('./Subscriber');
var EventBroker = require('./EventsBroker');

class LazySubscriber extends Subscriber {

    /**
     * @type {Object}
     */
    instance;

    /**
     * @type {boolean}
     */
    loading;

    /**
     * @type {Array}
     */
    queue;

    /**
     * Class constructor
     */
    constructor() {

        // set loading status
        this.loading = false;

        // init queue
        this.queue = [];

    }

    /**
     * Class destructor
     */
    destructor() {

    }

    /**
     * Event listener
     * @param {Event} event
     */
    onEvent(event) {

        if (this.instance) {

            // process event
            this.instance.onEvent(event);

        } else {

            // add to list of events waiting to be processed
            this.queue.push(event);

            // check if instance is already loading
            if (!this.loading) {

                // set loading state
                this.loading = true;

                // get events broker
                var broker = EventBroker.getInstance();

                // create load finished event channel
                broker.addSubscriber('', new Subscriber({}));

                // get instance
                this.getInstance(function () {

                    // remove loading state
                    this.loading = false;

                    // process all pending events
                    this.queue.forEach(function(event) {
                        this.instance.onEvent(event);
                    }, this);

                    // clear queue
                    this.queue = [];

                });

            }

        }

    }

    /**
     * @type {Function} Get instance of real class
     * @param {Function} callback
     */
    getInstance(callback) {throw 'Abstract method must be implemented';};

}

module.exports = LazySubscriber;
