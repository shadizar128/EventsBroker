class Event {

    /**
     * Class constructor
     * @param {String} name
     * @param {Object} config
     */
    constructor(name, config) {

        this.name = name;
        this.config = config;
        this.fired = false;

    }

    /**
     * Class destructor
     */
    destructor() {

        // delete object properties
        delete this.config;

    }

    /**
     * Return the event name
     * @returns {String}
     */
    getName() {
        return this.name;
    }

    /**
     * Fire event for all channel subscribers
     *
     * @param {Channel} channel
     */
    fire(channel) {

        if (this.fired) {
            throw 'Event can only be fired once';
        }

        // mark event as fired
        this.fired = true;

        // get subscribers
        var subscribers = Event.getSubscribers(channel);

        // subscribers left to observe the event
        this.remaining = subscribers.length;

        // number of subscribers that have processed the event
        this.processed = 0;

        if (this.remaining == 0) {

            // no subscribers, invoke final callback
            this.finish();

        } else {

            // invoke each subscriber's processing method
            subscribers.forEach(function(subscriber) {
                subscriber.onEvent(this);
            }, this);

        }

    }

    /**
     * Decrement the remaining count by 1, when it reaches 0 the final callback is invoked
     * @param {Boolean} processed If true the processed count is incremented by 1
     */
    onObserved(processed) {

        // increase the number of subscribers that have processed the event
        if (processed) {
            this.processed++;
        }

        // decrement number of remaining subscribers
        this.remaining--;

        // check if all subscribers are done and invoke the final callback
        if (this.remaining == 0) {
            this.finish();
        }

    }

    /**
     * Invoke the final callback based on the event status
     */
    finish() {

        // assert status of event based on the event requirements and how many subscribers have processed it
        // invoke success or failure callback

    }

    /**
     * Get subscribers that need to process this event based on event requirements and available subscribers
     * There are 3 scenarios for event requirements
     * - observable by all registered subscribers
     * - observable by only one subscriber
     * - observable by all subscribers that match a selection criteria
     * @param channel
     * @return {Subscriber[]}
     */
    static getSubscribers(channel) {

        var subscribers = [];

        // check if channel exists
        if (channel) {

            // get all subscribers
            // TODO: apply criteria and event requirements
            for (var subscriber of channel.values()) {
                subscribers.push(subscriber);
            }

        }

        return subscribers;

    }

}

module.exports = Event;