var Channel = require('./Channel');

class Broker {

    /**
     * Class constructor
     */
    constructor() {

        /**
         * @type {Map}
         */
        this.channels = new Map();

    }

    /**
     * Class destructor
     */
    destructor() {

        // clear channels
        this.channels = this.channels.clear();

        // delete object properties
        delete this.channels;

    }

    /**
     * Add a subscriber to a channel
     * @param {String} channelName
     * @param {Subscriber} subscriber
     * @returns {Broker}
     */
    addSubscriber(channelName, subscriber) {

        // TODO: check if subscriber has processing method

        // get channel
        var channel = this.channels.get(channelName);

        // check if channel was found
        if (!channel) {

            // create new channel if it does not exist
            channel = new Channel();

            // store channel
            this.channels.set(channelName, channel);


        }

        // add subscriber
        channel.addSubscriber(subscriber);

        // return self for chaining
        return this;

    }

    /**
     * Remove a subscriber from channel
     * @param {String} channelName
     * @param {Subscriber} subscriber
     * @returns {Broker}
     */
    removeSubscriber(channelName, subscriber) {

        // get channel
        var channel = this.channels.get(channelName);

        // check if channel was found
        if (channel) {

            // remove subscriber
            channel.removeSubscriber(subscriber);

            // check if channel has any subscribers left
            if (!channel.hasSubscribers()) {

                // call channel destructor
                channel.destructor();

                // remove channel
                this.channels.delete(channelName);

            }

        }

        // return self for chaining
        return this;

    }

    /**
     * Fire event
     * @param {Event} event
     */
    fireEvent(event) {

        // fire event
        event.fire(this.channels.get(event.getName()));

        // return self for chaining
        return this;

    };

}

module.exports = Broker;