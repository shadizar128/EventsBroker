class AbstractSubscriber {

    /**
     * Public constructor for the Channel class
     */
    constructor() {

        this._id = id;
        this._instance = null;
        this._isLoading = false;
        this._loadQueue = [];
        this._events = [];

    }

    /**
     * Return list of listened events
     * @returns {Array}
     */
    getEvents() {
        throw 'Abstract method must be implemented';
    }

    /**
     * Load the component
     * @param callback
     */
    load(callback) {
        throw 'Abstract method must be implemented';
    }

    /**
     *
     * @returns {string}
     */
    getId() {
        return this._id;
    };

    /**
     * Process event
     *
     * @param {string} eventName
     * @param {Context} context
     * @param {Function} callback
     */
    onEvent(eventName, context, callback) {

        if (!this._instance) {
            this.deferEvent(eventName, context, callback);
        } else {
            this.processEvent(eventName, context, callback);
        }

    }

    /**
     * Defer event after instance is loaded
     *
     * @param {string} eventName
     * @param {Context} context
     * @param {Function} callback
     */
    deferEvent(eventName, context, callback) {

        var me = this;
        this._loadQueue.push(function () {
            me._instance[eventName](context, callback);
        });

        if (!this._isLoading) {

            this._isLoading = true;
            this.load(function () {

                me._isLoading = false;

                var i, l = me._loadQueue.length;
                for (i = 0; i < l; i++) {
                    me._loadQueue[i]();
                }

            });

        }

    }

    /**
     * Defer event after instance is loaded
     *
     * @param {string} eventName
     * @param {Context} context
     * @param {Function} callback
     */
    processEvent(eventName, context, callback) {
        this._instance[eventName](context, callback);
    }

}

